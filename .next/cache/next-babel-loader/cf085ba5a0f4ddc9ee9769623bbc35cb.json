{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _jsxFileName = \"/Users/heegupark/Desktop/Workspace/MyProject/omega-talk/components/chat-main.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport ChatMainHead from './chat-main-head';\nimport ChatMainBody from './chat-main-body';\nimport socketIOClient from 'socket.io-client';\nvar socket = socketIOClient(\":\".concat(process.env.socketPort, \"/\"));\nexport default function ChatMain(props) {\n  _s();\n\n  var _useState = useState([]),\n      rooms = _useState[0],\n      setRooms = _useState[1];\n\n  var getRooms = function getRooms() {\n    fetch('/api/rooms', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      if (data.success) setRooms(data.rooms);\n    })[\"catch\"](function (err) {\n      console.error(\"Something wrong happened while getting room information:\".concat(err.message));\n    });\n  };\n\n  useEffect(function () {\n    getRooms();\n    return function () {};\n  }, []);\n  useEffect(function () {\n    var isMounted = true;\n\n    if (isMounted) {\n      socket.on('main', function (data) {\n        if (data.success) {\n          setRooms(function (rooms) {\n            return [data.data].concat(_toConsumableArray(rooms));\n          });\n\n          if (props.username === data.data.owner) {\n            props.openWindow(data.data._id, data.data);\n          }\n        }\n      });\n    }\n\n    return function () {\n      isMounted = false;\n    };\n  }, []);\n\n  var create = function create(roomname) {\n    var roomData = {\n      roomname: roomname,\n      username: props.username\n    };\n\n    if (socket) {\n      socket.emit('create-room', roomData);\n    }\n  };\n\n  var createChatroom = function createChatroom(roomname) {\n    create(roomname);\n  };\n\n  return __jsx(\"div\", {\n    className: props.isMobile ? 'main-chat-mobile' : 'main-chat',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }\n  }, __jsx(ChatMainHead, {\n    createChatroom: createChatroom,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }), __jsx(ChatMainBody, {\n    rooms: rooms,\n    openWindow: props.openWindow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }));\n}\n\n_s(ChatMain, \"maaZ5AaE3fd7snx/7wTE9rdhDNs=\");\n\n_c = ChatMain;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatMain\");","map":{"version":3,"sources":["/Users/heegupark/Desktop/Workspace/MyProject/omega-talk/components/chat-main.tsx"],"names":["React","useState","useEffect","ChatMainHead","ChatMainBody","socketIOClient","socket","process","env","socketPort","ChatMain","props","rooms","setRooms","getRooms","fetch","method","headers","then","res","json","data","success","err","console","error","message","isMounted","on","username","owner","openWindow","_id","create","roomname","roomData","emit","createChatroom","isMobile"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,YAAP,MAAyB,kBAAzB;AACA,OAAOC,YAAP,MAAyB,kBAAzB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,IAAMC,MAAM,GAAGD,cAAc,YAAKE,OAAO,CAACC,GAAR,CAAYC,UAAjB,OAA7B;AAEA,eAAe,SAASC,QAAT,CAAkBC,KAAlB,EAA8B;AAAA;;AAAA,kBACjBV,QAAQ,CAAC,EAAD,CADS;AAAA,MACpCW,KADoC;AAAA,MAC7BC,QAD6B;;AAE3C,MAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACrBC,IAAAA,KAAK,CAAC,YAAD,EAAe;AAClBC,MAAAA,MAAM,EAAE,KADU;AAElBC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AAFS,KAAf,CAAL,CAMGC,IANH,CAMQ,UAACC,GAAD;AAAA,aAASA,GAAG,CAACC,IAAJ,EAAT;AAAA,KANR,EAOGF,IAPH,CAOQ,UAACG,IAAD,EAAU;AACd,UAAIA,IAAI,CAACC,OAAT,EAAkBT,QAAQ,CAACQ,IAAI,CAACT,KAAN,CAAR;AACnB,KATH,WAUS,UAACW,GAAD,EAAS;AACdC,MAAAA,OAAO,CAACC,KAAR,mEAC6DF,GAAG,CAACG,OADjE;AAGD,KAdH;AAeD,GAhBD;;AAkBAxB,EAAAA,SAAS,CAAC,YAAM;AACdY,IAAAA,QAAQ;AACR,WAAO,YAAM,CAAE,CAAf;AACD,GAHQ,EAGN,EAHM,CAAT;AAKAZ,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIyB,SAAS,GAAG,IAAhB;;AACA,QAAIA,SAAJ,EAAe;AACbrB,MAAAA,MAAM,CAACsB,EAAP,CAAU,MAAV,EAAkB,UAACP,IAAD,EAAe;AAC/B,YAAIA,IAAI,CAACC,OAAT,EAAkB;AAChBT,UAAAA,QAAQ,CAAC,UAACD,KAAD;AAAA,oBAAiBS,IAAI,CAACA,IAAtB,4BAA+BT,KAA/B;AAAA,WAAD,CAAR;;AACA,cAAID,KAAK,CAACkB,QAAN,KAAmBR,IAAI,CAACA,IAAL,CAAUS,KAAjC,EAAwC;AACtCnB,YAAAA,KAAK,CAACoB,UAAN,CAAiBV,IAAI,CAACA,IAAL,CAAUW,GAA3B,EAAgCX,IAAI,CAACA,IAArC;AACD;AACF;AACF,OAPD;AAQD;;AACD,WAAO,YAAM;AACXM,MAAAA,SAAS,GAAG,KAAZ;AACD,KAFD;AAGD,GAfQ,EAeN,EAfM,CAAT;;AAiBA,MAAMM,MAAM,GAAG,SAATA,MAAS,CAACC,QAAD,EAAsB;AACnC,QAAMC,QAAQ,GAAG;AAAED,MAAAA,QAAQ,EAAEA,QAAZ;AAAsBL,MAAAA,QAAQ,EAAElB,KAAK,CAACkB;AAAtC,KAAjB;;AACA,QAAIvB,MAAJ,EAAY;AACVA,MAAAA,MAAM,CAAC8B,IAAP,CAAY,aAAZ,EAA2BD,QAA3B;AACD;AACF,GALD;;AAOA,MAAME,cAAc,GAAG,SAAjBA,cAAiB,CAACH,QAAD,EAAsB;AAC3CD,IAAAA,MAAM,CAACC,QAAD,CAAN;AACD,GAFD;;AAIA,SACE;AAAK,IAAA,SAAS,EAAEvB,KAAK,CAAC2B,QAAN,GAAiB,kBAAjB,GAAsC,WAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,YAAD;AAAc,IAAA,cAAc,EAAED,cAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,MAAC,YAAD;AAAc,IAAA,KAAK,EAAEzB,KAArB;AAA4B,IAAA,UAAU,EAAED,KAAK,CAACoB,UAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAMD;;GA3DuBrB,Q;;KAAAA,Q","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport ChatMainHead from './chat-main-head';\nimport ChatMainBody from './chat-main-body';\nimport socketIOClient from 'socket.io-client';\nconst socket = socketIOClient(`:${process.env.socketPort}/`);\n\nexport default function ChatMain(props: any) {\n  const [rooms, setRooms] = useState([]);\n  const getRooms = () => {\n    fetch('/api/rooms', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        if (data.success) setRooms(data.rooms);\n      })\n      .catch((err) => {\n        console.error(\n          `Something wrong happened while getting room information:${err.message}`\n        );\n      });\n  };\n\n  useEffect(() => {\n    getRooms();\n    return () => {};\n  }, []);\n\n  useEffect(() => {\n    let isMounted = true;\n    if (isMounted) {\n      socket.on('main', (data: any) => {\n        if (data.success) {\n          setRooms((rooms: any) => [data.data, ...rooms] as any);\n          if (props.username === data.data.owner) {\n            props.openWindow(data.data._id, data.data);\n          }\n        }\n      });\n    }\n    return () => {\n      isMounted = false;\n    };\n  }, []);\n\n  const create = (roomname: String) => {\n    const roomData = { roomname: roomname, username: props.username };\n    if (socket) {\n      socket.emit('create-room', roomData);\n    }\n  };\n\n  const createChatroom = (roomname: String) => {\n    create(roomname);\n  };\n\n  return (\n    <div className={props.isMobile ? 'main-chat-mobile' : 'main-chat'}>\n      <ChatMainHead createChatroom={createChatroom} />\n      <ChatMainBody rooms={rooms} openWindow={props.openWindow} />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}