{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport RoomChatMain from '../components/room-chat-main';\nimport RoomChatInput from '../components/room-chat-input';\nimport socketIOClient from 'socket.io-client';\nvar socket = socketIOClient(':8081/');\nexport var disconnectSocket = function disconnectSocket() {\n  console.log('Disconnecting socket...');\n  if (socket) socket.disconnect();\n};\nexport default function Room(props) {\n  var _roommainRef$current;\n\n  var _useState = useState([]),\n      messages = _useState[0],\n      setMessages = _useState[1];\n\n  var roommainRef = React.useRef(null);\n\n  var sendMessage = function sendMessage(message) {\n    if (socket) {\n      socket.emit('chat', {\n        _id: props.window._id,\n        roomname: props.window.roomname,\n        username: props.username,\n        message: message\n      });\n    }\n  };\n\n  var getMessages = function getMessages() {\n    fetch(\"/api/getmessage\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        _id: props.window._id\n      })\n    }).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      if (data.success) {\n        console.log(data);\n        setMessages(data.data);\n      }\n    })[\"catch\"](function (err) {\n      console.error(\"Something wrong happened while getting messages:\".concat(err.message));\n    });\n  };\n\n  useEffect(function () {\n    getMessages();\n  }, []);\n  useEffect(function () {\n    var room = props.window._id;\n    socket.on(\"room-\".concat(room), function (data) {\n      console.log(data);\n\n      if (data.data) {\n        setMessages(function (messages) {\n          return [].concat(_toConsumableArray(messages), [data.data]);\n        });\n      }\n    });\n    return function () {\n      disconnectSocket();\n    };\n  }, [props.window._id]);\n  return __jsx(\"div\", {\n    className: \"room-main\",\n    ref: roommainRef\n  }, __jsx(RoomChatMain, {\n    roommainHeight: (_roommainRef$current = roommainRef.current) === null || _roommainRef$current === void 0 ? void 0 : _roommainRef$current.clientHeight,\n    username: props.username,\n    roomId: props.window._id,\n    messages: messages\n  }), __jsx(RoomChatInput, {\n    sendMessage: sendMessage\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}