{"ast":null,"code":"import Room from '../../middleware/models/room';\n\nrequire('../../middleware/db/mongoose');\n\nexport default (async (request, response) => {\n  const limit = request.query.limit;\n  const skip = request.query.skip;\n\n  try {\n    const rooms = await Room.find().sort('ASC').limit(Number(limit)).skip(Number(skip)).exec();\n\n    if (!rooms) {\n      return response.status(404).json({\n        success: false,\n        message: 'failed to find rooms'\n      });\n    }\n\n    return response.json({\n      success: true,\n      rooms: rooms\n    });\n  } catch (e) {\n    return response.status(500).json({\n      success: false,\n      message: e.message\n    });\n  }\n});","map":{"version":3,"sources":["/Users/heegupark/Desktop/Workspace/MyProject/omega-talk/pages/api/rooms.tsx"],"names":["Room","require","request","response","limit","query","skip","rooms","find","sort","Number","exec","status","json","success","message","e"],"mappings":"AACA,OAAOA,IAAP,MAAiB,8BAAjB;;AACAC,OAAO,CAAC,8BAAD,CAAP;;AAEA,gBAAe,OAAOC,OAAP,EAAgCC,QAAhC,KAA8D;AAC3E,QAAMC,KAAK,GAAGF,OAAO,CAACG,KAAR,CAAcD,KAA5B;AACA,QAAME,IAAI,GAAGJ,OAAO,CAACG,KAAR,CAAcC,IAA3B;;AACA,MAAI;AACF,UAAMC,KAAK,GAAG,MAAMP,IAAI,CAACQ,IAAL,GACjBC,IADiB,CACZ,KADY,EAEjBL,KAFiB,CAEXM,MAAM,CAACN,KAAD,CAFK,EAGjBE,IAHiB,CAGZI,MAAM,CAACJ,IAAD,CAHM,EAIjBK,IAJiB,EAApB;;AAKA,QAAI,CAACJ,KAAL,EAAY;AACV,aAAOJ,QAAQ,CACZS,MADI,CACG,GADH,EAEJC,IAFI,CAEC;AAAEC,QAAAA,OAAO,EAAE,KAAX;AAAkBC,QAAAA,OAAO,EAAE;AAA3B,OAFD,CAAP;AAGD;;AACD,WAAOZ,QAAQ,CAACU,IAAT,CAAc;AAAEC,MAAAA,OAAO,EAAE,IAAX;AAAiBP,MAAAA,KAAK,EAAEA;AAAxB,KAAd,CAAP;AACD,GAZD,CAYE,OAAOS,CAAP,EAAU;AACV,WAAOb,QAAQ,CAACS,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AAAEC,MAAAA,OAAO,EAAE,KAAX;AAAkBC,MAAAA,OAAO,EAAEC,CAAC,CAACD;AAA7B,KAA1B,CAAP;AACD;AACF,CAlBD","sourcesContent":["import { NextApiRequest, NextApiResponse } from 'next';\nimport Room from '../../middleware/models/room';\nrequire('../../middleware/db/mongoose');\n\nexport default async (request: NextApiRequest, response: NextApiResponse) => {\n  const limit = request.query.limit;\n  const skip = request.query.skip;\n  try {\n    const rooms = await Room.find()\n      .sort('ASC')\n      .limit(Number(limit))\n      .skip(Number(skip))\n      .exec();\n    if (!rooms) {\n      return response\n        .status(404)\n        .json({ success: false, message: 'failed to find rooms' });\n    }\n    return response.json({ success: true, rooms: rooms });\n  } catch (e) {\n    return response.status(500).json({ success: false, message: e.message });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}