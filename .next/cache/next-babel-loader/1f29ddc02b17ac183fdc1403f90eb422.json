{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _jsxFileName = \"/Users/heegupark/Desktop/Workspace/MyProject/omega-talk/components/room.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport RoomChatMain from '../components/room-chat-main';\nimport RoomChatInput from '../components/room-chat-input';\nimport socketIOClient from 'socket.io-client';\nvar socket = socketIOClient(':8081/');\nexport var initiateSocket = function initiateSocket(room) {\n  console.log(\"Connecting socket...\");\n  if (socket && room) socket.emit('join', room);\n};\nexport var disconnectSocket = function disconnectSocket() {\n  console.log('Disconnecting socket...');\n  if (socket) socket.disconnect();\n};\nexport var subscribeToChat = function subscribeToChat(cb) {};\nexport default function Room(props) {\n  _s();\n\n  var _roommainRef$current;\n\n  var _useState = useState([]),\n      messages = _useState[0],\n      setMessages = _useState[1];\n\n  var roommainRef = React.useRef(null);\n\n  var sendMessage = function sendMessage(message) {\n    if (socket) {\n      socket.emit('chat', {\n        _id: props.window._id,\n        roomname: props.window.roomname,\n        username: props.username,\n        message: message\n      });\n    } // fetch('/api/message', {\n    //   method: 'POST',\n    //   headers: {\n    //     'Content-Type': 'application/json',\n    //   },\n    //   body: JSON.stringify({\n    //     _id: props.window._id,\n    //     roomname: props.window.roomname,\n    //     username: props.username,\n    //     message,\n    //   }),\n    // })\n    //   .then((res) => res.json())\n    //   .then((data: any) => {\n    //     if (data.success) {\n    //       setMessages([...messages, data.data] as any);\n    //     }\n    //   })\n    //   .catch((err) => {\n    //     console.error(\n    //       `Something wrong happened while sending a message:${err.message}`\n    //     );\n    //   });\n\n  };\n\n  var getMessages = function getMessages() {\n    fetch(\"/api/getmessage\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        _id: props.window._id\n      })\n    }).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      if (data.success) {\n        console.log(data);\n        setMessages(data.data);\n      }\n    })[\"catch\"](function (err) {\n      console.error(\"Something wrong happened while getting messages:\".concat(err.message));\n    });\n  };\n\n  useEffect(function () {\n    getMessages();\n  }, []);\n  useEffect(function () {\n    var room = props.window._id;\n    if (room) initiateSocket(room);\n    if (!socket) return true;\n    socket.on(\"room-\".concat(room), function (msg) {\n      console.log('Websocket event received!');\n      setMessages(function (messages) {\n        return [].concat(_toConsumableArray(messages), [data.data]);\n      });\n    });\n    return function () {\n      disconnectSocket();\n    }; // socket.on(`room-${props.window._id}`, (data: any) => {\n    //   console.log('via socket', data.data);\n    //   console.log(messages);\n    //   const newMessages = [...messages, data.data];\n    //   setMessages(newMessages as any);\n    // });\n  }, [props.window._id]);\n  return __jsx(\"div\", {\n    className: \"room-main\",\n    ref: roommainRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 5\n    }\n  }, __jsx(RoomChatMain, {\n    roommainHeight: (_roommainRef$current = roommainRef.current) === null || _roommainRef$current === void 0 ? void 0 : _roommainRef$current.clientHeight,\n    username: props.username,\n    messages: messages,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }\n  }), __jsx(RoomChatInput, {\n    sendMessage: sendMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }\n  }));\n}\n\n_s(Room, \"yeJA1bbyNgtbZSmo3fwOL0RplIk=\");\n\n_c = Room;\n\nvar _c;\n\n$RefreshReg$(_c, \"Room\");","map":{"version":3,"sources":["/Users/heegupark/Desktop/Workspace/MyProject/omega-talk/components/room.tsx"],"names":["React","useState","useEffect","RoomChatMain","RoomChatInput","socketIOClient","socket","initiateSocket","room","console","log","emit","disconnectSocket","disconnect","subscribeToChat","cb","Room","props","messages","setMessages","roommainRef","useRef","sendMessage","message","_id","window","roomname","username","getMessages","fetch","method","headers","body","JSON","stringify","then","res","json","data","success","err","error","on","msg","current","clientHeight"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport RoomChatMain from '../components/room-chat-main';\nimport RoomChatInput from '../components/room-chat-input';\nimport socketIOClient from 'socket.io-client';\nconst socket = socketIOClient(':8081/');\n\nexport const initiateSocket = (room: any) => {\n  console.log(`Connecting socket...`);\n  if (socket && room) socket.emit('join', room);\n};\nexport const disconnectSocket = () => {\n  console.log('Disconnecting socket...');\n  if (socket) socket.disconnect();\n};\nexport const subscribeToChat = (cb: any) => {};\n\nexport default function Room(props: any) {\n  const [messages, setMessages] = useState([]);\n  const roommainRef = React.useRef<HTMLDivElement>(null);\n\n  const sendMessage = (message: string) => {\n    if (socket) {\n      socket.emit('chat', {\n        _id: props.window._id,\n        roomname: props.window.roomname,\n        username: props.username,\n        message,\n      });\n    }\n    // fetch('/api/message', {\n    //   method: 'POST',\n    //   headers: {\n    //     'Content-Type': 'application/json',\n    //   },\n    //   body: JSON.stringify({\n    //     _id: props.window._id,\n    //     roomname: props.window.roomname,\n    //     username: props.username,\n    //     message,\n    //   }),\n    // })\n    //   .then((res) => res.json())\n    //   .then((data: any) => {\n    //     if (data.success) {\n    //       setMessages([...messages, data.data] as any);\n    //     }\n    //   })\n    //   .catch((err) => {\n    //     console.error(\n    //       `Something wrong happened while sending a message:${err.message}`\n    //     );\n    //   });\n  };\n  const getMessages = () => {\n    fetch(`/api/getmessage`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        _id: props.window._id,\n      }),\n    })\n      .then((res) => res.json())\n      .then((data: any) => {\n        if (data.success) {\n          console.log(data);\n          setMessages(data.data);\n        }\n      })\n      .catch((err) => {\n        console.error(\n          `Something wrong happened while getting messages:${err.message}`\n        );\n      });\n  };\n\n  useEffect(() => {\n    getMessages();\n  }, []);\n\n  useEffect(() => {\n    const room = props.window._id;\n    if (room) initiateSocket(room);\n    if (!socket) return true;\n    socket.on(`room-${room}`, (msg: any) => {\n      console.log('Websocket event received!');\n      setMessages((messages: any) => [...messages, data.data] as any);\n    });\n    return () => {\n      disconnectSocket();\n    };\n    // socket.on(`room-${props.window._id}`, (data: any) => {\n    //   console.log('via socket', data.data);\n    //   console.log(messages);\n    //   const newMessages = [...messages, data.data];\n    //   setMessages(newMessages as any);\n    // });\n  }, [props.window._id]);\n\n  return (\n    <div className=\"room-main\" ref={roommainRef}>\n      <RoomChatMain\n        roommainHeight={roommainRef.current?.clientHeight}\n        username={props.username}\n        messages={messages}\n      />\n      <RoomChatInput sendMessage={sendMessage} />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}