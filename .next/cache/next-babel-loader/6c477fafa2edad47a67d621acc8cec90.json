{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _jsxFileName = \"/Users/heegupark/Desktop/Workspace/MyProject/omega-talk/components/chat-main.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport ChatMainHead from './chat-main-head';\nimport ChatMainBody from './chat-main-body';\nimport socketIOClient from 'socket.io-client';\nvar socket = socketIOClient(':8081/');\nexport var disconnectSocket = function disconnectSocket() {\n  console.log('Disconnecting socket...');\n  if (socket) socket.disconnect();\n};\nexport default function ChatMain(props) {\n  _s();\n\n  var _useState = useState([]),\n      rooms = _useState[0],\n      setRooms = _useState[1];\n\n  var getRooms = function getRooms() {\n    fetch('/api/rooms', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      if (data.success) setRooms(data.rooms);\n    })[\"catch\"](function (err) {\n      console.error(\"Something wrong happened while getting room information:\".concat(err.message));\n    });\n  };\n\n  useEffect(getRooms, []);\n  useEffect(function () {\n    socket.on(\"room-\".concat(room), function (data) {\n      console.log('Websocket event received!');\n      setMessages(function (messages) {\n        return [].concat(_toConsumableArray(messages), [data.data]);\n      });\n    });\n    return function () {\n      disconnectSocket();\n    };\n  }, [props.window._id]);\n\n  var create = function create(roomname) {\n    fetch('/api/create', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        roomname: roomname,\n        username: props.username\n      })\n    }).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      var newRooms = [data.room].concat(_toConsumableArray(rooms));\n\n      if (data.success) {\n        setRooms(newRooms);\n        props.openWindow(data.room._id, data.room);\n      }\n    })[\"catch\"](function (err) {\n      console.error(\"Something wrong happened while creating:\".concat(err.message));\n    });\n  };\n\n  var createChatroom = function createChatroom(roomname) {\n    create(roomname);\n  };\n\n  return __jsx(\"div\", {\n    className: \"main-chat\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  }, __jsx(ChatMainHead, {\n    createChatroom: createChatroom,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }), __jsx(ChatMainBody, {\n    rooms: rooms,\n    openWindow: props.openWindow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }));\n}\n\n_s(ChatMain, \"maaZ5AaE3fd7snx/7wTE9rdhDNs=\");\n\n_c = ChatMain;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatMain\");","map":{"version":3,"sources":["/Users/heegupark/Desktop/Workspace/MyProject/omega-talk/components/chat-main.tsx"],"names":["React","useState","useEffect","ChatMainHead","ChatMainBody","socketIOClient","socket","disconnectSocket","console","log","disconnect","ChatMain","props","rooms","setRooms","getRooms","fetch","method","headers","then","res","json","data","success","err","error","message","on","room","setMessages","messages","window","_id","create","roomname","body","JSON","stringify","username","newRooms","openWindow","createChatroom"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport ChatMainHead from './chat-main-head';\nimport ChatMainBody from './chat-main-body';\nimport socketIOClient from 'socket.io-client';\nconst socket = socketIOClient(':8081/');\n\nexport const disconnectSocket = () => {\n  console.log('Disconnecting socket...');\n  if (socket) socket.disconnect();\n};\n\nexport default function ChatMain(props: any) {\n  const [rooms, setRooms] = useState([]);\n  const getRooms = () => {\n    fetch('/api/rooms', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        if (data.success) setRooms(data.rooms);\n      })\n      .catch((err) => {\n        console.error(\n          `Something wrong happened while getting room information:${err.message}`\n        );\n      });\n  };\n\n  useEffect(getRooms, []);\n\n  useEffect(() => {\n    socket.on(`room-${room}`, (data: any) => {\n      console.log('Websocket event received!');\n      setMessages((messages: any) => [...messages, data.data] as any);\n    });\n    return () => {\n      disconnectSocket();\n    };\n  }, [props.window._id]);\n\n  const create = (roomname: String) => {\n    fetch('/api/create', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ roomname: roomname, username: props.username }),\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        const newRooms = [data.room, ...rooms] as any;\n        if (data.success) {\n          setRooms(newRooms);\n          props.openWindow(data.room._id, data.room);\n        }\n      })\n      .catch((err) => {\n        console.error(`Something wrong happened while creating:${err.message}`);\n      });\n  };\n\n  const createChatroom = (roomname: String) => {\n    create(roomname);\n  };\n\n  return (\n    <div className=\"main-chat\">\n      <ChatMainHead createChatroom={createChatroom} />\n      <ChatMainBody rooms={rooms} openWindow={props.openWindow} />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}