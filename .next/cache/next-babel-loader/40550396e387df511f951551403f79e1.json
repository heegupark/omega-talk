{"ast":null,"code":"var _jsxFileName = \"/Users/heegupark/Desktop/Workspace/MyProject/omega-talk/components/room.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport RoomChatMain from '../components/room-chat-main';\nimport RoomChatInput from '../components/room-chat-input';\nimport socketIOClient from 'socket.io-client';\nconst socket = socketIOClient(':8081/');\nexport const initiateSocket = room => {\n  console.log(`Connecting socket...`);\n  if (socket && room) socket.emit('join', room);\n};\nexport const disconnectSocket = () => {\n  console.log('Disconnecting socket...');\n  if (socket) socket.disconnect();\n};\nexport const subscribeToChat = cb => {\n  if (!socket) return true;\n  socket.on('chat', msg => {\n    console.log('Websocket event received!');\n    return cb(null, msg);\n  });\n};\nexport default function Room(props) {\n  var _roommainRef$current;\n\n  const {\n    0: messages,\n    1: setMessages\n  } = useState([]);\n  const roommainRef = React.useRef(null);\n\n  const sendMessage = message => {\n    if (socket) socket.emit('chat', {\n      _id: props.window._id,\n      roomname: props.window.roomname,\n      username: props.username,\n      message\n    }); // fetch('/api/message', {\n    //   method: 'POST',\n    //   headers: {\n    //     'Content-Type': 'application/json',\n    //   },\n    //   body: JSON.stringify({\n    //     _id: props.window._id,\n    //     roomname: props.window.roomname,\n    //     username: props.username,\n    //     message,\n    //   }),\n    // })\n    //   .then((res) => res.json())\n    //   .then((data: any) => {\n    //     if (data.success) {\n    //       setMessages([...messages, data.data] as any);\n    //     }\n    //   })\n    //   .catch((err) => {\n    //     console.error(\n    //       `Something wrong happened while sending a message:${err.message}`\n    //     );\n    //   });\n  };\n\n  const getMessages = () => {\n    fetch(`/api/getmessage`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        _id: props.window._id\n      })\n    }).then(res => res.json()).then(data => {\n      if (data.success) {\n        console.log(data);\n        setMessages(data.data);\n      }\n    }).catch(err => {\n      console.error(`Something wrong happened while getting messages:${err.message}`);\n    });\n  };\n\n  useEffect(() => {\n    getMessages();\n  }, []);\n  useEffect(() => {\n    const room = props.window._id;\n    if (room) initiateSocket(room);\n    subscribeToChat((err, data) => {\n      if (err) return;\n      setChat(oldChats => [data, ...oldChats]);\n    });\n    return () => {\n      disconnectSocket();\n    };\n    socket.on(`room-${props.window._id}`, data => {\n      console.log('via socket', data.data);\n      console.log(messages);\n      const newMessages = [...messages, data.data];\n      setMessages(newMessages);\n    });\n  }, [props.window._id]);\n  return __jsx(\"div\", {\n    className: \"room-main\",\n    ref: roommainRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 5\n    }\n  }, __jsx(RoomChatMain, {\n    roommainHeight: (_roommainRef$current = roommainRef.current) === null || _roommainRef$current === void 0 ? void 0 : _roommainRef$current.clientHeight,\n    username: props.username,\n    messages: messages,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }\n  }), __jsx(RoomChatInput, {\n    sendMessage: sendMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/heegupark/Desktop/Workspace/MyProject/omega-talk/components/room.tsx"],"names":["React","useState","useEffect","RoomChatMain","RoomChatInput","socketIOClient","socket","initiateSocket","room","console","log","emit","disconnectSocket","disconnect","subscribeToChat","cb","on","msg","Room","props","messages","setMessages","roommainRef","useRef","sendMessage","message","_id","window","roomname","username","getMessages","fetch","method","headers","body","JSON","stringify","then","res","json","data","success","catch","err","error","setChat","oldChats","newMessages","current","clientHeight"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport RoomChatMain from '../components/room-chat-main';\nimport RoomChatInput from '../components/room-chat-input';\nimport socketIOClient from 'socket.io-client';\nconst socket = socketIOClient(':8081/');\n\nexport const initiateSocket = (room: any) => {\n  console.log(`Connecting socket...`);\n  if (socket && room) socket.emit('join', room);\n};\nexport const disconnectSocket = () => {\n  console.log('Disconnecting socket...');\n  if (socket) socket.disconnect();\n};\nexport const subscribeToChat = (cb: any) => {\n  if (!socket) return true;\n  socket.on('chat', (msg: any) => {\n    console.log('Websocket event received!');\n    return cb(null, msg);\n  });\n};\n\nexport default function Room(props: any) {\n  const [messages, setMessages] = useState([]);\n  const roommainRef = React.useRef<HTMLDivElement>(null);\n\n  const sendMessage = (message: string) => {\n    if (socket)\n      socket.emit('chat', {\n        _id: props.window._id,\n        roomname: props.window.roomname,\n        username: props.username,\n        message,\n      });\n\n    // fetch('/api/message', {\n    //   method: 'POST',\n    //   headers: {\n    //     'Content-Type': 'application/json',\n    //   },\n    //   body: JSON.stringify({\n    //     _id: props.window._id,\n    //     roomname: props.window.roomname,\n    //     username: props.username,\n    //     message,\n    //   }),\n    // })\n    //   .then((res) => res.json())\n    //   .then((data: any) => {\n    //     if (data.success) {\n    //       setMessages([...messages, data.data] as any);\n    //     }\n    //   })\n    //   .catch((err) => {\n    //     console.error(\n    //       `Something wrong happened while sending a message:${err.message}`\n    //     );\n    //   });\n  };\n  const getMessages = () => {\n    fetch(`/api/getmessage`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        _id: props.window._id,\n      }),\n    })\n      .then((res) => res.json())\n      .then((data: any) => {\n        if (data.success) {\n          console.log(data);\n          setMessages(data.data);\n        }\n      })\n      .catch((err) => {\n        console.error(\n          `Something wrong happened while getting messages:${err.message}`\n        );\n      });\n  };\n\n  useEffect(() => {\n    getMessages();\n  }, []);\n\n  useEffect(() => {\n    const room = props.window._id;\n    if (room) initiateSocket(room);\n    subscribeToChat((err, data) => {\n      if (err) return;\n      setChat((oldChats) => [data, ...oldChats]);\n    });\n    return () => {\n      disconnectSocket();\n    };\n    socket.on(`room-${props.window._id}`, (data: any) => {\n      console.log('via socket', data.data);\n      console.log(messages);\n      const newMessages = [...messages, data.data];\n      setMessages(newMessages as any);\n    });\n  }, [props.window._id]);\n\n  return (\n    <div className=\"room-main\" ref={roommainRef}>\n      <RoomChatMain\n        roommainHeight={roommainRef.current?.clientHeight}\n        username={props.username}\n        messages={messages}\n      />\n      <RoomChatInput sendMessage={sendMessage} />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}