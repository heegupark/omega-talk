{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from 'react';\nimport { Rnd } from 'react-rnd';\nimport Left from '../components/left';\nimport Top from '../components/top';\nimport ChatMain from '../components/chat-main';\nimport Room from '../components/room';\nimport EnterUsername from '../components/enter-username';\nimport Snackbar from '@material-ui/core/Snackbar';\nexport default function Window(props) {\n  const {\n    0: position,\n    1: setPosition\n  } = useState(props.window ? {\n    x: props.window.positionX,\n    y: props.window.positionY\n  } : {\n    x: 200,\n    y: 50\n  });\n  const {\n    0: tempPosition,\n    1: setTempPosition\n  } = useState({\n    x: 0,\n    y: 0\n  });\n  const {\n    0: size,\n    1: setSize\n  } = useState({\n    width: 400,\n    height: 640\n  });\n  const {\n    0: tempSize,\n    1: setTempSize\n  } = useState({\n    width: 400,\n    height: 640\n  }); // const [zIndex, setZIndex] = useState(props.window ? props.window.zIndex : 0);\n\n  const {\n    0: zIndex,\n    1: setZIndex\n  } = useState(0);\n  const {\n    0: marginLeft,\n    1: setMarginLeft\n  } = useState(0);\n  const {\n    0: isCloseMainWindow,\n    1: setIsCloseMainWindow\n  } = useState(false);\n  let {\n    0: isExpanded,\n    1: setIsExpanded\n  } = useState(false);\n  let {\n    0: isMinimized,\n    1: setIsMinimized\n  } = useState(false);\n  let {\n    0: isDraggable,\n    1: setIsDraggable\n  } = useState(true);\n  useEffect(() => {\n    setZIndex(props.zIndex);\n  }, [props.zIndex]);\n  const [state, setState] = React.useState({\n    open: false,\n    vertical: 'bottom',\n    horizontal: 'left'\n  });\n  const {\n    open,\n    vertical,\n    horizontal\n  } = state;\n\n  const closeMinimize = () => {\n    setState(_objectSpread(_objectSpread({}, state), {}, {\n      open: false\n    }));\n  };\n\n  const expand = () => {\n    setTempPosition({\n      x: position.x,\n      y: position.y\n    });\n    setPosition({\n      x: 0,\n      y: 0\n    });\n    if (!isMinimized) setTempSize({\n      width: size.width,\n      height: size.height\n    });\n    setSize({\n      width: window.innerWidth,\n      height: window.innerHeight\n    });\n    setIsDraggable(false);\n    setIsExpanded(true);\n  };\n\n  const shrink = () => {\n    setPosition({\n      x: tempPosition.x,\n      y: tempPosition.y\n    });\n    setSize({\n      width: tempSize.width,\n      height: tempSize.height\n    });\n    setIsDraggable(true);\n    setIsExpanded(false);\n  };\n\n  const handleExpand = () => {\n    if (isMinimized) {\n      setIsMinimized(false);\n      closeMinimize();\n      expand();\n    } else {\n      if (isExpanded) {\n        shrink();\n      } else {\n        expand();\n      }\n    }\n  };\n\n  const handleMinimize = () => {\n    const numOfMinimized = document.querySelectorAll('#minimized').length;\n    setMarginLeft(numOfMinimized * 100);\n\n    if (isMinimized) {\n      setPosition({\n        x: position.x,\n        y: position.y\n      });\n      closeMinimize();\n    } else {\n      setState({\n        open: true,\n        vertical: 'bottom',\n        horizontal: 'left'\n      });\n    }\n\n    setIsMinimized(!isMinimized);\n  };\n\n  const handleCloseWindow = () => {\n    if (props.window) {\n      props.closeWindow(props.window._id);\n    } else {\n      setIsCloseMainWindow(true);\n      setIsMinimized(false);\n      setState({\n        open: true,\n        vertical: 'top',\n        horizontal: 'left'\n      });\n    }\n  };\n\n  const openMainWindow = () => {\n    setIsCloseMainWindow(false);\n    setState(_objectSpread(_objectSpread({}, state), {}, {\n      open: false\n    }));\n  };\n\n  let element = null;\n\n  switch (props.category) {\n    case 'username':\n      element = __jsx(\"div\", {\n        className: \"username-box\"\n      }, __jsx(EnterUsername, {\n        handleExpand: handleExpand,\n        handleMinimize: handleMinimize,\n        handleCloseWindow: handleCloseWindow,\n        setUsername: props.setUsername\n      }));\n      break;\n\n    case 'main':\n      element = __jsx(\"div\", {\n        className: \"main-box\"\n      }, __jsx(Left, {\n        signout: props.signout,\n        handleCloseWindow: handleCloseWindow,\n        handleMinimize: handleMinimize,\n        handleExpand: handleExpand\n      }), __jsx(ChatMain, {\n        openWindow: props.openWindow,\n        username: props.username\n      }));\n      break;\n\n    case 'chat-room':\n      element = __jsx(\"div\", {\n        className: \"room-box\"\n      }, __jsx(Top, {\n        handleCloseWindow: handleCloseWindow,\n        window: props.window,\n        handleMinimize: handleMinimize,\n        handleExpand: handleExpand\n      }), __jsx(Room, {\n        username: props.username,\n        window: props.window\n      }));\n      break;\n  }\n\n  return __jsx(React.Fragment, null, !isMinimized && !isCloseMainWindow && __jsx(Rnd, {\n    default: {\n      x: position.x,\n      y: position.y,\n      width: size.width,\n      height: size.height\n    },\n    position: {\n      x: position.x,\n      y: position.y\n    },\n    size: {\n      width: size.width,\n      height: size.height\n    },\n    minWidth: 320,\n    minHeight: 640,\n    onDragStop: (e, d) => {\n      setPosition({\n        x: d.x,\n        y: d.y\n      });\n    },\n    onDragStart: () => {\n      setZIndex(props.maxZIndex + 1);\n      props.setMaxZIndex(props.maxZIndex + 1);\n    },\n    onResizeStop: (e, direction, ref, delta, position) => {\n      setSize({\n        width: Number(ref.style.width.split('px')[0]),\n        height: Number(ref.style.height.split('px')[0])\n      });\n    },\n    disableDragging: !isDraggable,\n    style: {\n      zIndex\n    }\n  }, element), __jsx(Snackbar, {\n    id: \"minimized\",\n    style: {\n      marginLeft\n    },\n    anchorOrigin: {\n      vertical,\n      horizontal\n    },\n    open: open,\n    key: vertical + horizontal\n  }, isCloseMainWindow ? __jsx(\"span\", {\n    onClick: () => openMainWindow(),\n    className: \"closed-box bg-brown cursor-pointer\"\n  }, \"+\") : __jsx(\"span\", {\n    className: \"minimized-box\"\n  }, __jsx(Left, {\n    styleCategory: \"minimized\",\n    category: props.category,\n    handleCloseWindow: handleCloseWindow,\n    window: props.window,\n    handleMinimize: handleMinimize,\n    handleExpand: handleExpand\n  }))));\n}","map":null,"metadata":{},"sourceType":"module"}