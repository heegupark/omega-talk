{"ast":null,"code":"import Room from '../../middleware/models/room';\n\nrequire('../../middleware/db/mongoose');\n\nexport default (async (request, response) => {\n  const {\n    owner,\n    roomname,\n    username,\n    message\n  } = request.body;\n  console.log(roomname, username, message);\n\n  try {\n    const newMessage = new Room({\n      roomname,\n      owner,\n      messages: {\n        username,\n        message\n      }\n    });\n    const result = await newMessage.save();\n    return response.status(201).json({\n      success: true,\n      data: result\n    });\n  } catch (e) {\n    return response.status(500).json({\n      success: false,\n      message: 'failed to send a message'\n    });\n  }\n});","map":{"version":3,"sources":["/Users/heegupark/Desktop/Workspace/MyProject/omega-talk/pages/api/message.tsx"],"names":["Room","require","request","response","owner","roomname","username","message","body","console","log","newMessage","messages","result","save","status","json","success","data","e"],"mappings":"AACA,OAAOA,IAAP,MAAiB,8BAAjB;;AACAC,OAAO,CAAC,8BAAD,CAAP;;AAEA,gBAAe,OAAOC,OAAP,EAAgCC,QAAhC,KAA8D;AAC3E,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,QAAT;AAAmBC,IAAAA,QAAnB;AAA6BC,IAAAA;AAA7B,MAAyCL,OAAO,CAACM,IAAvD;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYL,QAAZ,EAAsBC,QAAtB,EAAgCC,OAAhC;;AACA,MAAI;AACF,UAAMI,UAAU,GAAG,IAAIX,IAAJ,CAAS;AAC1BK,MAAAA,QAD0B;AAE1BD,MAAAA,KAF0B;AAG1BQ,MAAAA,QAAQ,EAAE;AAAEN,QAAAA,QAAF;AAAYC,QAAAA;AAAZ;AAHgB,KAAT,CAAnB;AAKA,UAAMM,MAAM,GAAG,MAAMF,UAAU,CAACG,IAAX,EAArB;AACA,WAAOX,QAAQ,CAACY,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AAAEC,MAAAA,OAAO,EAAE,IAAX;AAAiBC,MAAAA,IAAI,EAAEL;AAAvB,KAA1B,CAAP;AACD,GARD,CAQE,OAAOM,CAAP,EAAU;AACV,WAAOhB,QAAQ,CACZY,MADI,CACG,GADH,EAEJC,IAFI,CAEC;AAAEC,MAAAA,OAAO,EAAE,KAAX;AAAkBV,MAAAA,OAAO,EAAE;AAA3B,KAFD,CAAP;AAGD;AACF,CAhBD","sourcesContent":["import { NextApiRequest, NextApiResponse } from 'next';\nimport Room from '../../middleware/models/room';\nrequire('../../middleware/db/mongoose');\n\nexport default async (request: NextApiRequest, response: NextApiResponse) => {\n  const { owner, roomname, username, message } = request.body;\n  console.log(roomname, username, message);\n  try {\n    const newMessage = new Room({\n      roomname,\n      owner,\n      messages: { username, message },\n    });\n    const result = await newMessage.save();\n    return response.status(201).json({ success: true, data: result });\n  } catch (e) {\n    return response\n      .status(500)\n      .json({ success: false, message: 'failed to send a message' });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}