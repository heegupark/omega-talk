{"ast":null,"code":"import Room from '../../middleware/models/room';\nimport socketIo from 'socket.io';\n\nrequire('../../middleware/db/mongoose');\n\nexport default (async (request, response) => {\n  const {\n    _id,\n    username,\n    message\n  } = request.body;\n\n  try {\n    const room = await Room.findOne({\n      _id\n    });\n\n    if (!room) {\n      return response.status(404).json({\n        success: false,\n        message: 'failed to find a room'\n      });\n    }\n\n    await room.messages.push({\n      username,\n      message\n    });\n    room.save();\n    const result = room.messages[room.messages.length - 1];\n    socketIo.emit(`room-${_id}`, {\n      success: true,\n      data: result\n    });\n    return response.status(201).json({\n      success: true,\n      data: result\n    });\n  } catch (e) {\n    return response.status(500).json({\n      success: false,\n      message: 'failed to send a message'\n    });\n  }\n});","map":{"version":3,"sources":["/Users/heegupark/Desktop/Workspace/MyProject/omega-talk/pages/api/message.tsx"],"names":["Room","socketIo","require","request","response","_id","username","message","body","room","findOne","status","json","success","messages","push","save","result","length","emit","data","e"],"mappings":"AACA,OAAOA,IAAP,MAAiB,8BAAjB;AACA,OAAOC,QAAP,MAAqB,WAArB;;AACAC,OAAO,CAAC,8BAAD,CAAP;;AAEA,gBAAe,OAAOC,OAAP,EAAgCC,QAAhC,KAA8D;AAC3E,QAAM;AAAEC,IAAAA,GAAF;AAAOC,IAAAA,QAAP;AAAiBC,IAAAA;AAAjB,MAA6BJ,OAAO,CAACK,IAA3C;;AACA,MAAI;AACF,UAAMC,IAAI,GAAG,MAAMT,IAAI,CAACU,OAAL,CAAa;AAAEL,MAAAA;AAAF,KAAb,CAAnB;;AACA,QAAI,CAACI,IAAL,EAAW;AACT,aAAOL,QAAQ,CACZO,MADI,CACG,GADH,EAEJC,IAFI,CAEC;AAAEC,QAAAA,OAAO,EAAE,KAAX;AAAkBN,QAAAA,OAAO,EAAE;AAA3B,OAFD,CAAP;AAGD;;AACD,UAAME,IAAI,CAACK,QAAL,CAAcC,IAAd,CAAmB;AAAET,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,KAAnB,CAAN;AACAE,IAAAA,IAAI,CAACO,IAAL;AACA,UAAMC,MAAM,GAAGR,IAAI,CAACK,QAAL,CAAcL,IAAI,CAACK,QAAL,CAAcI,MAAd,GAAuB,CAArC,CAAf;AACAjB,IAAAA,QAAQ,CAACkB,IAAT,CAAe,QAAOd,GAAI,EAA1B,EAA6B;AAAEQ,MAAAA,OAAO,EAAE,IAAX;AAAiBO,MAAAA,IAAI,EAAEH;AAAvB,KAA7B;AACA,WAAOb,QAAQ,CAACO,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AAAEC,MAAAA,OAAO,EAAE,IAAX;AAAiBO,MAAAA,IAAI,EAAEH;AAAvB,KAA1B,CAAP;AACD,GAZD,CAYE,OAAOI,CAAP,EAAU;AACV,WAAOjB,QAAQ,CACZO,MADI,CACG,GADH,EAEJC,IAFI,CAEC;AAAEC,MAAAA,OAAO,EAAE,KAAX;AAAkBN,MAAAA,OAAO,EAAE;AAA3B,KAFD,CAAP;AAGD;AACF,CAnBD","sourcesContent":["import { NextApiRequest, NextApiResponse } from 'next';\nimport Room from '../../middleware/models/room';\nimport socketIo from 'socket.io';\nrequire('../../middleware/db/mongoose');\n\nexport default async (request: NextApiRequest, response: NextApiResponse) => {\n  const { _id, username, message } = request.body;\n  try {\n    const room = await Room.findOne({ _id });\n    if (!room) {\n      return response\n        .status(404)\n        .json({ success: false, message: 'failed to find a room' });\n    }\n    await room.messages.push({ username, message });\n    room.save();\n    const result = room.messages[room.messages.length - 1];\n    socketIo.emit(`room-${_id}`, { success: true, data: result });\n    return response.status(201).json({ success: true, data: result });\n  } catch (e) {\n    return response\n      .status(500)\n      .json({ success: false, message: 'failed to send a message' });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}