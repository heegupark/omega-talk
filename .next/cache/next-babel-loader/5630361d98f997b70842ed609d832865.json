{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _jsxFileName = \"/Users/heegupark/Desktop/Workspace/MyProject/omega-talk/components/chat-main.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport ChatMainHead from './chat-main-head';\nimport ChatMainBody from './chat-main-body';\nimport socketIOClient from 'socket.io-client';\nvar socket = socketIOClient(':8081/');\nexport var disconnectSocket = function disconnectSocket() {\n  if (socket) socket.disconnect();\n};\nexport default function ChatMain(props) {\n  _s();\n\n  var _useState = useState([]),\n      rooms = _useState[0],\n      setRooms = _useState[1];\n\n  var getRooms = function getRooms() {\n    fetch('/api/rooms', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      if (data.success) setRooms(data.rooms);\n    })[\"catch\"](function (err) {\n      console.error(\"Something wrong happened while getting room information:\".concat(err.message));\n    });\n  };\n\n  useEffect(getRooms, []);\n  useEffect(function () {\n    socket.on('main', function (data) {\n      console.log(data); // const newRooms = [data.data, ...rooms] as any;\n\n      if (data.success) {\n        setRooms(function (rooms) {\n          return [data.data].concat(_toConsumableArray(rooms));\n        });\n\n        if (props.username === data.data.username) {\n          props.openWindow(data.data._id, data.data);\n        }\n      }\n    });\n    return function () {\n      disconnectSocket();\n    };\n  }, []);\n\n  var create = function create(roomname) {\n    var roomData = {\n      roomname: roomname,\n      username: props.username\n    };\n\n    if (socket) {\n      socket.emit('create-room', roomData);\n    } // fetch('/api/create', {\n    //   method: 'POST',\n    //   headers: {\n    //     'Content-Type': 'application/json',\n    //   },\n    //   body: JSON.stringify({ roomname: roomname, username: props.username }),\n    // })\n    //   .then((res) => res.json())\n    //   .then((data) => {\n    //     const newRooms = [data.room, ...rooms] as any;\n    //     if (data.success) {\n    //       setRooms(newRooms);\n    //       props.openWindow(data.room._id, data.room);\n    //     }\n    //   })\n    //   .catch((err) => {\n    //     console.error(`Something wrong happened while creating:${err.message}`);\n    //   });\n\n  };\n\n  var createChatroom = function createChatroom(roomname) {\n    create(roomname);\n  };\n\n  return __jsx(\"div\", {\n    className: \"main-chat\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 5\n    }\n  }, __jsx(ChatMainHead, {\n    createChatroom: createChatroom,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }), __jsx(ChatMainBody, {\n    rooms: rooms,\n    openWindow: props.openWindow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }));\n}\n\n_s(ChatMain, \"maaZ5AaE3fd7snx/7wTE9rdhDNs=\");\n\n_c = ChatMain;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatMain\");","map":{"version":3,"sources":["/Users/heegupark/Desktop/Workspace/MyProject/omega-talk/components/chat-main.tsx"],"names":["React","useState","useEffect","ChatMainHead","ChatMainBody","socketIOClient","socket","disconnectSocket","disconnect","ChatMain","props","rooms","setRooms","getRooms","fetch","method","headers","then","res","json","data","success","err","console","error","message","on","log","username","openWindow","_id","create","roomname","roomData","emit","createChatroom"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport ChatMainHead from './chat-main-head';\nimport ChatMainBody from './chat-main-body';\nimport socketIOClient from 'socket.io-client';\nconst socket = socketIOClient(':8081/');\n\nexport const disconnectSocket = () => {\n  if (socket) socket.disconnect();\n};\n\nexport default function ChatMain(props: any) {\n  const [rooms, setRooms] = useState([]);\n  const getRooms = () => {\n    fetch('/api/rooms', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        if (data.success) setRooms(data.rooms);\n      })\n      .catch((err) => {\n        console.error(\n          `Something wrong happened while getting room information:${err.message}`\n        );\n      });\n  };\n\n  useEffect(getRooms, []);\n\n  useEffect(() => {\n    socket.on('main', (data: any) => {\n      console.log(data);\n      // const newRooms = [data.data, ...rooms] as any;\n      if (data.success) {\n        setRooms((rooms: any) => [data.data, ...rooms] as any);\n        if (props.username === data.data.username) {\n          props.openWindow(data.data._id, data.data);\n        }\n      }\n    });\n    return () => {\n      disconnectSocket();\n    };\n  }, []);\n\n  const create = (roomname: String) => {\n    const roomData = { roomname: roomname, username: props.username };\n    if (socket) {\n      socket.emit('create-room', roomData);\n    }\n    // fetch('/api/create', {\n    //   method: 'POST',\n    //   headers: {\n    //     'Content-Type': 'application/json',\n    //   },\n    //   body: JSON.stringify({ roomname: roomname, username: props.username }),\n    // })\n    //   .then((res) => res.json())\n    //   .then((data) => {\n    //     const newRooms = [data.room, ...rooms] as any;\n    //     if (data.success) {\n    //       setRooms(newRooms);\n    //       props.openWindow(data.room._id, data.room);\n    //     }\n    //   })\n    //   .catch((err) => {\n    //     console.error(`Something wrong happened while creating:${err.message}`);\n    //   });\n  };\n\n  const createChatroom = (roomname: String) => {\n    create(roomname);\n  };\n\n  return (\n    <div className=\"main-chat\">\n      <ChatMainHead createChatroom={createChatroom} />\n      <ChatMainBody rooms={rooms} openWindow={props.openWindow} />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}